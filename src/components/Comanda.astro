---
const tableOptions = Array.from({ length: 20 }, (_, i) => `Mesa ${i + 1}`);
---
<section class="container px-4 py-10 mx-auto">
    <div class="overflow-hidden bg-white rounded-lg shadow-lg">
        <div class="p-4 bg-gray-100 border-b rounded-t-lg">
            <h4 class="text-xl font-bold text-gray-800">PRE-COMANDA</h4>
        </div>
        <div class="p-6">
            <!-- Formulario para Nombres y Apellidos -->
            <div class="mb-4">
                <label class="block mb-1 font-semibold text-gray-600" for="nombre_cliente">Nombres y Apellidos:</label>
                <input type="text" class="w-full p-3 transition duration-200 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" id="nombre_cliente" placeholder="Ingresa tus datos" required>
            </div>

            <!-- Fila para Nro. Teléfono y Nro. WhatsApp -->
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 mb-4">
                <div>
                    <label class="block mb-1 font-semibold text-gray-600" for="numero_telefono">Nro. Teléfono:</label>
                    <input type="tel" class="w-full p-3 transition duration-200 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" id="numero_telefono" placeholder="Ingresa tu teléfono" required>
                </div>
                <div>
                    <label class="block mb-1 font-semibold text-gray-600" for="numero_whatsapp">Nro. WhatsApp:</label>
                    <input type="tel" class="w-full p-3 transition duration-200 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" id="numero_whatsapp" placeholder="Ingresa tu número de WhatsApp" required>
                </div>
            </div>

            <!-- Selección del tipo de atención -->
            <div class="mb-4">
                <label class="block mb-1 font-semibold text-gray-600" for="table-number-select">Tipo de atención:</label>
                <select class="w-full p-3 transition duration-200 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" id="table-number-select" required>
                    <option value="" selected disabled>-- Seleccione una opción</option>
                    <option value="Delivery">Pedido por Delivery</option>
                    {tableOptions.map(option => (
                        <option value={option}>{option}</option>
                    ))}
                </select>
            </div>

            <!-- Dirección de entrega -->
            <div class="mb-4" id="delivery-address-group" style="display: none;">
                <label class="block mb-1 font-semibold text-gray-600" for="delivery-address">Dirección de entrega:</label>
                <input type="text" id="delivery-address" class="w-full p-3 transition duration-200 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Ingrese una dirección incluyendo referencia" />
            </div>

            <!-- Tabla de pedidos -->
            <div class="mb-6 overflow-x-auto">
                <table id="order-list" class="w-full bg-white border border-gray-300 rounded-lg">
                    <thead class="bg-gray-100 border-b border-gray-200">
                        <tr>
                            <th class="p-4 border border-gray-300 text-left text-primary">Cantidad</th>
                            <th class="p-4 border border-gray-300 text-left text-primary">Producto</th>
                            <th class="p-4 border border-gray-300 text-left text-primary">Precio Unitario</th>
                            <th class="p-4 border border-gray-300 text-left text-primary">Subtotal</th>
                            <th class="p-4 border border-gray-300 text-left text-primary">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="order-list-body" class="bg-white divide-y divide-gray-200">
                        <tr>
                            <td colspan="5" class="p-4 text-center text-gray-500">No hay información para mostrar</td>
                        </tr>
                    </tbody>
                    <tfoot class="bg-gray-100 border-t border-gray-300">
                        <tr>
                            <td colspan="3" class="p-4 font-bold text-right text-gray-800">TOTAL:</td>
                            <td id="total-cell" class="p-4 font-bold text-right text-gray-800 border-b border-gray-300">S/ 0.00</td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <!-- Botones -->
            <div class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4">
                <button id="send-whatsapp-btn" class="flex-1 px-4 py-2 text-white transition duration-200 rounded-lg shadow bg-primary hover:bg-secondary">Enviar por WhatsApp</button>
                <button id="print-ticket-btn" class="flex-1 px-4 py-2 text-white bg-black rounded hover:bg-gray-800">Imprimir Ticket</button>
                <button id="reset-cart-btn" class="flex-1 px-4 py-2 text-white bg-red-500 rounded hover:bg-red-600">Restablecer Ticket</button>
            </div>
        </div>
    </div>
</section>

<script>
    async function displayCartItems() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const orderListBody = document.getElementById('order-list-body');
        const totalCell = document.getElementById('total-cell');
        const resetCartBtn = document.getElementById('reset-cart-btn');

        // Limpiar el contenido de la tabla
        orderListBody.innerHTML = '';

        let totalPrice = 0;

        // Configurar el botón de restablecimiento
        resetCartBtn.addEventListener('click', resetCart);

        // Verificar si el carrito está vacío
        if (cart.length === 0) {
            orderListBody.innerHTML = '<tr><td colspan="5" class="text-center p-4">No hay información para mostrar</td></tr>';
            totalCell.innerText = 'S/ 0.00';
            return; // Salir de la función si no hay artículos
        }

        const groupedCart = cart.reduce((acc, item) => {
            const existingItem = acc.find(i => i.name === item.name);
            if (existingItem) {
                existingItem.quantity += item.quantity;
            } else {
                acc.push({ ...item });
            }
            return acc;
        }, []);

        groupedCart.forEach(item => {
            const row = document.createElement('tr');
            const itemPrice = parseFloat(item.price) || 0;
            const itemQuantity = item.quantity || 1;
            const totalItemPrice = (itemPrice * itemQuantity).toFixed(2);

            totalPrice += parseFloat(totalItemPrice);

            row.innerHTML = `
                <td class="p-4 border border-gray-300 text-primary">${itemQuantity}</td>
                <td class="p-4 border border-gray-300 text-primary">${item.name}</td>
                <td class="p-4 border border-gray-300 text-primary">S/ ${itemPrice.toFixed(2)}</td>
                <td class="p-4 border border-gray-300 text-primary">S/ ${totalItemPrice}</td>
                <td class="p-4 border border-gray-300 flex space-x-2">
                    <button class="increase-item bg-primary text-white w-10 h-10 rounded-full flex items-center justify-center hover:bg-info transition ease-in-out duration-200" data-name="${item.name}" aria-label="Incrementar cantidad">
                        <i class="fa-solid fa-plus"></i>
                    </button>
                    <button class="decrease-item bg-primary text-white w-10 h-10 rounded-full flex items-center justify-center hover:bg-info transition ease-in-out duration-200" data-name="${item.name}" aria-label="Disminuir cantidad">
                        <i class="fa-solid fa-minus"></i>
                    </button>
                    <button class="remove-item bg-secondary text-white w-10 h-10 rounded-full flex items-center justify-center hover:bg-info transition ease-in-out duration-200" data-name="${item.name}" aria-label="Eliminar">
                        <i class="fa-solid fa-trash-can"></i>
                    </button>
                </td>
            `;
            orderListBody.appendChild(row);
        });

        totalCell.innerText = `S/ ${totalPrice.toFixed(2)}`;

        // Actualizar eventos para los botones después de regenerar la tabla
        addEventListeners();

        // Actualiza el resumen al cambiar el carrito
        updateWhatsAppSummary(groupedCart, totalPrice);
    }

    function addEventListeners() {
        document.querySelectorAll('.increase-item').forEach(button =>
            button.addEventListener('click', (event) => {
                const itemName = (event.currentTarget as HTMLElement).getAttribute('data-name');
                updateCart(itemName, 1);
            })
        );

        document.querySelectorAll('.decrease-item').forEach(button =>
            button.addEventListener('click', (event) => {
                const itemName = (event.currentTarget as HTMLElement).getAttribute('data-name');
                updateCart(itemName, -1);
            })
        );

        document.querySelectorAll('.remove-item').forEach(button =>
            button.addEventListener('click', (event) => {
                const itemName = (event.currentTarget as HTMLElement).getAttribute('data-name');
                confirmRemoveItem(itemName);
            })
        );
    }

    function updateCart(itemName, change) {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const itemIndex = cart.findIndex(item => item.name === itemName);

        if (itemIndex > -1) {
            cart[itemIndex].quantity += change;
            if (cart[itemIndex].quantity <= 0) {
                cart.splice(itemIndex, 1); // Elimina el elemento si su cantidad es 0
            }
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        displayCartItems(); // Refresca la tabla sin recargar la página
    }

    async function confirmRemoveItem(itemName) {
        const Swal = (await import('sweetalert2')).default;
        Swal.fire({
            title: '¿Estás seguro?',
            text: `Eliminarás ${itemName} de la comanda`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Eliminar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                removeItemFromCart(itemName);
            }
        });
    }

    function removeItemFromCart(itemName) {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const newCart = cart.filter(item => item.name !== itemName);
        localStorage.setItem('cart', JSON.stringify(newCart));
        displayCartItems(); // Refresca la tabla sin recargar la página
    }

    async function resetCart() {
        const Swal = (await import('sweetalert2')).default;
        Swal.fire({
            title: 'Comanda',
            text: 'restablecida correctamente.',
            icon: 'success'
        });
        localStorage.removeItem('cart');
        displayCartItems(); // Refresca la tabla sin recargar la página
    }

    function updateWhatsAppSummary(groupedCart, totalPrice) {
        const sendWhatsAppBtn = document.getElementById('send-whatsapp-btn');
        sendWhatsAppBtn.onclick = function () {
            const nombreCliente = (document.getElementById('nombre_cliente') as HTMLInputElement).value;
            const telefonoCliente = (document.getElementById('numero_telefono') as HTMLInputElement).value;
            const telefonoWhatsapp = (document.getElementById('numero_whatsapp') as HTMLInputElement).value;
            const tableNumber = (document.getElementById('table-number-select') as HTMLSelectElement).value;
            const deliveryAddress = (document.getElementById('delivery-address') as HTMLInputElement).value;

            const direccion = tableNumber === 'Delivery' ? deliveryAddress : '-';

            // Recalcular el resumen con los productos actuales del carrito
            const resumen = groupedCart.map(item => `${item.name}: ${item.quantity} unidades - S/ ${((item.price * item.quantity)).toFixed(2)}`).join(',\n');

            const mensaje = encodeURIComponent(
                `Resumen de la compra:
                *Datos del Cliente:* ${nombreCliente},
                *Teléfono:* ${telefonoCliente},
                *WhatsApp:* ${telefonoWhatsapp},
                *Tipo de Atención:* ${tableNumber === 'Delivery' ? 'Para Llevar/Delivery' : `Consumo en Local: ${tableNumber}`},
                *Dirección de entrega:* ${direccion}. | \n${resumen}\n
                *TOTAL A PAGAR:* S/ ${totalPrice.toFixed(2)}`);

            const numeroTelefono = '912561398'; // Reemplaza con el número de teléfono deseado
            const enlaceWhatsApp = `https://wa.me/${numeroTelefono}?text=${mensaje}`;
            window.open(enlaceWhatsApp, '_blank');
        };
    }

    function toggleDeliveryInput() {
        const selectElement = document.getElementById('table-number-select');
        const deliveryAddressGroup = document.getElementById('delivery-address-group');

        selectElement.addEventListener('change', (event) => {
            const target = event.target as HTMLSelectElement;
            deliveryAddressGroup.style.display = (target.value === 'Delivery') ? 'block' : 'none';
        });
    }

    function printTicket() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const nombreCliente = (document.getElementById('nombre_cliente') as HTMLInputElement).value;
        const telefonoCliente = (document.getElementById('numero_telefono') as HTMLInputElement).value;
        const telefonoWhatsapp = (document.getElementById('numero_whatsapp') as HTMLInputElement).value;
        const tableNumber = (document.getElementById('table-number-select') as HTMLInputElement).value;
        const deliveryAddressElement = (document.getElementById('delivery-address') as HTMLInputElement);
        const deliveryAddress = deliveryAddressElement ? deliveryAddressElement.value : "";

        // Generar el contenido del ticket, incluyendo tipo de atención
        let ticketContent = `<h2>Pre-Comanda Milmaray</h2>`;
        ticketContent += `<p><strong>Datos del Cliente:</strong> ${nombreCliente}</p>`;
        ticketContent += `<p><strong>Teléfono:</strong> ${telefonoCliente}</p>`;
        ticketContent += `<p><strong>WhatsApp:</strong> ${telefonoWhatsapp}</p>`;

        // Verificar si es una mesa o delivery
        if (tableNumber === "Delivery") {
            ticketContent += `<p><strong>Tipo de Atención:</strong> Para Llevar/Delivery</p>`;
            ticketContent += `<p><strong>Dirección:</strong> ${deliveryAddress}</p>`;
        } else {
            ticketContent += `<p><strong>Tipo de Atención:</strong> Consumo en Local: ${tableNumber}</p>`;
        }

    ticketContent += `<table style="width:100%; border-collapse: collapse;">
        <tr>
            <th style="border: 1px solid #000; padding: 8px;">Cantidad</th>
            <th style="border: 1px solid #000; padding: 8px;">Producto</th>
            <th style="border: 1px solid #000; padding: 8px;">Precio</th>
            <th style="border: 1px solid #000; padding: 8px;">Sub-Total</th>
        </tr>`;

    let totalPrice = 0;

    cart.forEach(item => {
        const itemTotal = (item.price * item.quantity).toFixed(2);
        totalPrice += parseFloat(itemTotal);
        ticketContent += `
            <tr>
                <td style="border: 1px solid #000; padding: 8px;">${item.quantity}</td>
                <td style="border: 1px solid #000; padding: 8px;">${item.name}</td>
                <td style="border: 1px solid #000; padding: 8px;">S/ ${item.price.toFixed(2)}</td>
                <td style="border: 1px solid #000; padding: 8px;">S/ ${itemTotal}</td>
            </tr>`;
    });

    ticketContent += `</table>`;
    ticketContent += `<p><strong>Total a Pagar:</strong> S/ ${totalPrice.toFixed(2)}</p>`;
    ticketContent += `<p>Gracias por tu compra!</p>`;

    // Crear una ventana de impresión
    const printWindow = window.open('', '', 'height=400,width=600');
        printWindow.document.write('<html><head><title>Imprimir Ticket</title>');
        printWindow.document.write('</head><body>');
        printWindow.document.write(ticketContent);
        printWindow.document.write('</body></html>');
        printWindow.document.close(); // Cerrar el documento
        printWindow.print(); // Abrir el diálogo de impresión
    }

    // Agregar el evento al botón de imprimir
    document.getElementById('print-ticket-btn').addEventListener('click', printTicket);


    document.addEventListener('DOMContentLoaded', () => {
        displayCartItems();
        toggleDeliveryInput();
    });
</script>
